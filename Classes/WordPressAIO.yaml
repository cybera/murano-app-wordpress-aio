Namespaces:
  =: ca.cybera
  conf: io.murano.configuration
  res: io.murano.resources
  std: io.murano
  sys: io.murano.system

Name: WordPressAIO
Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()

  instance:
    Contract: $.class(res:LinuxMuranoInstance).notNull()

  volume:
    Contract: $.class(res:CinderVolume).notNull()

  dbRootPassword:
    Contract: $.string().notNull()

  wpDbPassword:
    Contract: $.string().notNull()

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          # Create Security Group
          - $._environment.reporter.report($this, 'Creating instance for WordPress')
          - $securityGroupIngress:
            - ToPort: 80
              FromPort: 80
              IpProtocol: tcp
              External: true
            - ToPort: 443
              FromPort: 443
              IpProtocol: tcp
              External: true
          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress, 'MuranoSecurityGroup-Wordpress')

          # Launch the instance
          - $.instance.deploy()

          # Create volume
          - $._environment.reporter.report($this, 'Creating a new volume')
          - $.volume.deploy()

          # Attach the volume to the instance
          - $._environment.reporter.report($this, 'Attaching the volume to the instance')
          - $attachment: $.volume.attachTo($.instance)
          - $._environment.stack.updateTemplate($attachment.template)
          - $._environment.stack.push()

          # Deploy Apache
          - $._environment.reporter.report($this, 'Instance is created. Deploying Apache.')
          - $file: sys:Resources.string('deployApache.sh')
          - conf:Linux.runCommand($.instance.agent, $file)
          - $._environment.reporter.report($this, 'Apache is installed.')

          # Deploy MySQL
          - $._environment.reporter.report($this, 'Deploying MySQL')
          - $replacements:
              "%ROOT_MYSQL_PASSWORD%": $.dbRootPassword
              "%WP_MYSQL_PASSWORD%": $.wpDbPassword
          - $file: sys:Resources.string('deployMySQL.sh').replace($replacements)
          - conf:Linux.runCommand($.instance.agent, $file)
          - $._environment.reporter.report($this, 'MySQL is installed.')

          # Deploy WordPress
          - $replacements:
              "%WP_MYSQL_PASSWORD%": $.wpDbPassword
          - $._environment.reporter.report($this, 'Deploying WordPress')
          - $file: sys:Resources.string('deployWordPress.sh').replace($replacements)
          - conf:Linux.runCommand($.instance.agent, $file)
          - $._environment.reporter.report($this, 'WordPress is installed')

          # Assign Floating IP
          - If: $.instance.assignFloatingIp
            Then:
              - $host: $.instance.floatingIpAddress
            Else:
              - $host: $.instance.ipAddresses.first()
          - $._environment.reporter.report($this, format('WordPress is available at http://{0}', $host))
          - $.setAttr(deployed, true)
