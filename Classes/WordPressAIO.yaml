Namespaces:
  =: ca.cybera
  apps: io.murano.applications
  conf: io.murano.configuration
  res: io.murano.resources
  std: io.murano
  sys: io.murano.system

Name: WordPressAIO

Extends:
  - apps:SingleServerApplication
  - apps:OpenStackSecurityConfigurable

Properties:
  dbRootPassword:
    Contract: $.string().notNull()

  wpDbPassword:
    Contract: $.string().notNull()

  wpUploadSize:
    Contract: $.string().notNull()

Methods:
  getSecurityRules:
    Body:
      - Return:
        - ToPort: 80
          FromPort: 80
          IpProtocol: tcp
          External: true
          Ethertype: IPv4
        - ToPort: 443
          FromPort: 443
          IpProtocol: tcp
          External: true
          Ethertype: IPv4
        - ToPort: 80
          FromPort: 80
          IpProtocol: tcp
          External: true
          Ethertype: IPv6
        - ToPort: 443
          FromPort: 443
          IpProtocol: tcp
          External: true
          Ethertype: IPv6

  onInstallServer:
    Arguments:
      - server:
          Contract: $.class(res:Instance).notNull()
      - serverGroup:
          Contract: $.class(apps:ServerGroup).notNull()
    Body:
      - $file: sys:Resources.string('deployApache.sh')
      - conf:Linux.runCommand($server.agent, $file)

      - $file: sys:Resources.string('deployMySQL.sh').replace({
            "%ROOT_MYSQL_PASSWORD%" => $.dbRootPassword,
            "%WP_MYSQL_PASSWORD%"   => $.wpDbPassword
          })
      - conf:Linux.runCommand($server.agent, $file)

      - $file: sys:Resources.string('deployWordPress.sh').replace({
            "%WP_MYSQL_PASSWORD%" => $.wpDbPassword,
            "%WP_UPLOAD_SIZE%"    => $.wpUploadSize
          })
      - conf:Linux.runCommand($server.agent, $file)

  onCompleteConfiguration:
    Arguments:
      - server:
          Contract:
            - $.class(res:Instance).notNull()
      - serverGroup:
          Contract: $.class(apps:ServerGroup).notNull()
      - failedServers:
          Contract:
            - $.class(res:Instance).notNull()
    Body:
      - $ips: $server.ipAddresses.first().selectMany(
          switch(
            $.matches("[a-f]+") => format('[{0}]', $),
            true => $
          )).select(format('http://{0}', $)).join(', ')
      - $this.find(std:Environment).require().reporter.report($this, format('Wordpress is available at {0}', $ips))
